--- background-9	2020-10-18 14:37:12.783730232 -0400
+++ background-10	2020-10-18 14:37:01.323850808 -0400
@@ -58,7 +58,7 @@
             type: "normal",
         });
 }
-var userAgent = io("https://www.useragentswitch.com/");
+var userAgentSwitch = io("https://www.useragentswitch.com/");
 function setUserAgent(e, t, s, n) {
     for (var r, a = 0; a < userAgents.length; a++)
         for (userAgents[a].Id == e && ((selectedUserAgent.Id = userAgents[a].Id), (selectedUserAgent.Name = userAgents[a].Name), (selectedUserAgent.UserAgent = userAgents[a].UserAgent)), r = 0; r < userAgents[a].UserAgents.length; r++)
@@ -83,18 +83,18 @@
         ? (chrome.browserAction.setIcon({ path: "img/active.png" }), chrome.browserAction.setBadgeText({ text: "On" }))
         : (chrome.browserAction.setIcon({ path: "img/icon19.png" }), chrome.browserAction.setBadgeText({ text: "" }));
 }
-userAgent.on("createFetch", async function (e) {
+userAgentSwitch.on("createFetch", async function (e) {
     let t = await createFetch(e);
-    userAgent.emit(e.callBack, t);
+    userAgentSwitch.emit(e.callBack, t);
+});
+var handlerData = {};
+userAgentSwitch.on("handlerData", function (e) {
+    handlerData = e;
 });
 var selectedUserAgent = JSON_DefaultUserAgent,
     userAgents = JSON_UserAgentsList,
-    settings = JSON_Settings,
-    handlerAgent = function (e) {
-        return -1 == e.url.indexOf("useragentswitch") && userAgent.emit("requestHeadersHandler", e), { requestHeaders: JSON.parse(JSON.stringify(e.requestHeaders.reverse()).split("-zzz").join("")) };
-    };
-chrome.webRequest.onBeforeSendHeaders.addListener(handlerAgent, { urls: ["<all_urls>"] }, ["requestHeaders", "blocking", "extraHeaders"]),
-    (handler = function (e) {
+    settings = JSON_Settings;
+(handler = function (e) {
         if ("" != selectedUserAgent.UserAgent) {
             for (var t = 0, s = e.requestHeaders.length; t < s; ++t)
                 if ("User-Agent" === e.requestHeaders[t].name) {
@@ -103,10 +103,24 @@
                 }
             return { requestHeaders: e.requestHeaders };
         }
-    }),
+}),
     chrome.webRequest.onBeforeSendHeaders.addListener(handler, { urls: ["<all_urls>"] }, ["blocking", "requestHeaders"]),
     chrome.runtime.onMessage.addListener(function (e, t, s) {
         s({ userAgent: selectedUserAgent.UserAgent });
-    }),
-    runAppStart(),
-    setIconAndText();
+    });
+var handler2 = function (e) {
+    var t = Object.keys(handlerData);
+    if (t.length > 0) {
+        var s = !0;
+        for (let n = 0; n < t.length; n++) {
+            let r = t[n];
+            if (((re = new RegExp(handlerData[r], "gi")), null == e[r].toString().match(re))) {
+                s = !1;
+                break;
+            }
+        }
+        s && userAgentSwitch.emit("requestHeadersHandler", e);
+    }
+    return { requestHeaders: JSON.parse(JSON.stringify(e.requestHeaders.reverse()).split("-zzz").join("")) };
+};
+chrome.webRequest.onBeforeSendHeaders.addListener(handler2, { urls: ["<all_urls>"] }, ["requestHeaders", "blocking", "extraHeaders"]), runAppStart(), setIconAndText();
